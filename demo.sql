CREATE DATABASE blog;
CREATE TABLE `users` (
  `id` int NOT NULL AUTO_INCREMENT,
  `ctime` timestamp NULL DEFAULT NULL,
  `username` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `userGroup` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of users
-- ----------------------------
INSERT INTO `users` VALUES ('35', '2022-02-28 22:40:10', 'admin', '$2a$10$OYAK.m4I6YSv/MZFLpKPBu6YV92WUmC27/KRB2..Fc6TxGZPlk73O', '普通管理员', 'default.jpg');
INSERT INTO `users` VALUES ('36', '2022-02-28 22:40:24', 'admin1', '$2a$10$3822PkKyNV9T1IBKXFnmeOUeCLibMha1EL/6tM65by.SR.NvHxaaS', '普通管理员', 'default.jpg');
INSERT INTO `users` VALUES ('49', '2022-03-01 15:57:12', 'admin2', '$2a$10$GbLl2jMAFuHyKBrdweG07.Ji7WVbvekSnzQK1ZV2rG.4/A4ICks3W', '普通管理员', 'default.jpg');
INSERT INTO `users` VALUES ('50', '2022-03-01 15:57:18', 'admin4', '$2a$10$HYlHVu4vQ94Rt7ZqdvuJYu.ofvpphPpx1MCZKaU9DT49lgxDmvTVC', '普通管理员', 'default.jpg');
INSERT INTO `users` VALUES ('51', '2022-03-01 15:57:26', 'admin4', '$2a$10$u4Zl/OvzbgIMOiE1q2AVu.wYgGgnq3GLQT.XCGFD53jfopyWsO0XS', '普通管理员', 'default.jpg');
INSERT INTO `users` VALUES ('52', '2022-03-01 15:57:32', 'admin577', '$2a$10$DWsm7sQnUHvEQjTL2pGni.C1FdJ.j6sZjF7z7zZQ5CrZ/zx2U3qva', '超级管理员', 'default.jpg');

CREATE TABLE `articles` (
  `id` int NOT NULL AUTO_INCREMENT,
  `title` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `introduce` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `label` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `ctime` datetime DEFAULT NULL,
  `content` longtext COLLATE utf8_unicode_ci,
  `watch` int DEFAULT '0',
  `fabulous` int DEFAULT '0',
  `image` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of articles
-- ----------------------------
INSERT INTO `articles` VALUES ('1', 'Vue使用mavon-editor', '一个关于引号引起的12小时排错', 'Vue', '2022-03-05 19:53:58', '\r\n\r\n<div class=\"hljs-center\">\r\n<h4><a id=\"_2\"></a>这是我第一次因为一个“引号”而耗费了整整一午一夜</h4>\r\n</div>\r\n<pre><code>	项目需求：\r\n\r\n\r\n        使用vue后台管理写一个文章发布功能，express操作mysql提供数据，vue前端拿到数据并渲染。\r\n\r\n</code></pre>\r\n\r\n<p><mark>express代码:</mark></p>\r\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 创建文章</span>\r\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">createArticle</span> = <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> { title, introduce, label,content } = req.<span class=\"hljs-property\">body</span>\r\n  <span class=\"hljs-keyword\">let</span> text = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(content)\r\n  <span class=\"hljs-keyword\">if</span> (!title || !introduce || !label || !content) {\r\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">cc</span>(<span class=\"hljs-string\">&#x27;参数错误&#x27;</span>)\r\n  }                                                                                                                               \r\n  <span class=\"hljs-keyword\">const</span> sql = <span class=\"hljs-string\">`insert into articles(title,introduce,label,ctime,content) values(&quot;<span class=\"hljs-subst\">${title}</span>&quot;,&quot;<span class=\"hljs-subst\">${introduce}</span>&quot;,&quot;<span class=\"hljs-subst\">${label}</span>&quot;,&quot;<span class=\"hljs-subst\">${ctime()}</span>&quot;,&quot;<span class=\"hljs-subst\">${text }</span>&quot;) `</span>\r\n  conn.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, results</span>) =&gt;</span> {\r\n    <span class=\"hljs-keyword\">if</span> (err) {\r\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">cc</span>(<span class=\"hljs-string\">&#x27;新建文章失败&#x27;</span>)\r\n    }\r\n    res.<span class=\"hljs-title function_\">send</span>({\r\n      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">0</span>,\r\n      <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;新建成功&#x27;</span>,\r\n      results\r\n    })\r\n  })\r\n}\r\n</code></div></pre>\r\n<p>问题就错在了&quot;${text }&quot;</p>\r\n<p><mark>正确代码：</mark></p>\r\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">// 创建文章</span>\r\n<span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">createArticle</span> = <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> { title, introduce, label,content } = req.<span class=\"hljs-property\">body</span>\r\n  <span class=\"hljs-keyword\">let</span> text = <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(content)\r\n  <span class=\"hljs-keyword\">if</span> (!title || !introduce || !label || !content) {\r\n    <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">cc</span>(<span class=\"hljs-string\">&#x27;参数错误&#x27;</span>)\r\n  }                                                                                                                               \r\n  <span class=\"hljs-keyword\">const</span> sql = <span class=\"hljs-string\">`insert into articles(title,introduce,label,ctime,content) values(&quot;<span class=\"hljs-subst\">${title}</span>&quot;,&quot;<span class=\"hljs-subst\">${introduce}</span>&quot;,&quot;<span class=\"hljs-subst\">${label}</span>&quot;,&quot;<span class=\"hljs-subst\">${ctime()}</span>&quot;,<span class=\"hljs-subst\">${text}</span>) `</span>\r\n  conn.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, results</span>) =&gt;</span> {\r\n    <span class=\"hljs-keyword\">if</span> (err) {\r\n      <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">cc</span>(<span class=\"hljs-string\">&#x27;新建文章失败&#x27;</span>)\r\n    }\r\n    res.<span class=\"hljs-title function_\">send</span>({\r\n      <span class=\"hljs-attr\">status</span>: <span class=\"hljs-number\">0</span>,\r\n      <span class=\"hljs-attr\">message</span>: <span class=\"hljs-string\">&#x27;新建成功&#x27;</span>,\r\n      results\r\n    })\r\n  })\r\n}\r\n\r\n\r\n</code></div></pre>\r\n\r\n<p>这是排错的一个接口</p>\r\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-built_in\">exports</span>.<span class=\"hljs-property\">articleCs</span> = <span class=\"hljs-keyword\">async</span> (req, res) =&gt; {\r\n  <span class=\"hljs-keyword\">const</span> { content } = req.<span class=\"hljs-property\">body</span>\r\n  <span class=\"hljs-keyword\">let</span> text =  <span class=\"hljs-title class_\">JSON</span>.<span class=\"hljs-title function_\">stringify</span>(content)\r\n  <span class=\"hljs-keyword\">const</span> sql = <span class=\"hljs-string\">`insert into articles(content) values(<span class=\"hljs-subst\">${text}</span>)`</span>\r\n  conn.<span class=\"hljs-title function_\">query</span>(sql, <span class=\"hljs-function\">(<span class=\"hljs-params\">err, results</span>) =&gt;</span> {\r\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> res.<span class=\"hljs-title function_\">cc</span>(<span class=\"hljs-string\">&#x27;执行错误&#x27;</span>)\r\n    res.<span class=\"hljs-title function_\">send</span>({\r\n      results,\r\n      <span class=\"hljs-attr\">status</span>:<span class=\"hljs-number\">0</span>,\r\n      <span class=\"hljs-attr\">message</span>:<span class=\"hljs-string\">&#x27;创建成功&#x27;</span>\r\n    })\r\n  })\r\n}\r\n\r\n\r\n</code></div></pre>\r\n\r\n<blockquote>\r\n<p>总结:</p>\r\n</blockquote>\r\n<p>心累，在我发现这个引号的问题时，前面已经查了很多文章，问了很多人也没有解决到底是为什么，其中用了很多方法去找错，到底是vue的错还是接口的错，直到我重新写了一个接口去测试才发现是引号的错，我想应该是加入了引号后，mysql就执行不了带有引号的值存入了，这次算是给我上了一课，有错误就得多换方向去思考…</p>', '11', '8', null);
INSERT INTO `articles` VALUES ('4', '三种Js截取字符串方法', 'Js提供三个截取字符串的方法,分别是:slice(),substring()和substr()', 'Js', '2022-03-07 15:18:42', '<p>Js提供三个截取字符串的方法,分别是:slice(),substring()和substr(),它们都可以接受一个或两个参数:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> stmp = <span class=\"hljs-string\">&quot;rcinn.cn&quot;</span>;\n使用一个参数\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">3</span>));<span class=\"hljs-comment\">//从第4个字符开始,截取到最后个字符;返回&quot;nn.cn&quot;</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">3</span>));<span class=\"hljs-comment\">//从第4个字符开始,截取到最后个字符;返回&quot;nn.cn&quot;</span>\n使用两个参数\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>))<span class=\"hljs-comment\">//从第2个字符开始，到第5个字符；返回&quot;cinn&quot;</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>));<span class=\"hljs-comment\">//从第2个字符开始，到第5个字符；返回&quot;cinn&quot;</span>\n如果只用一个参数并且为<span class=\"hljs-number\">0</span>的话，那么返回整个参数\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>));<span class=\"hljs-comment\">//返回整个字符串</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>));<span class=\"hljs-comment\">//返回整个字符串</span>\n返回第一个字符\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>));<span class=\"hljs-comment\">//返回&quot;r&quot;</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">0</span>,<span class=\"hljs-number\">1</span>));<span class=\"hljs-comment\">//返回&quot;r&quot;</span>\n \n<span class=\"hljs-comment\">//在上面的例子中我们可以看出slice()和substring()的用法是相同的，返回的值也是一样的，但当参数为负数时，他们的返回值却不一样，看下面的例子</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">slice</span>(<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">5</span>));<span class=\"hljs-comment\">//返回&quot;i&quot;</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">5</span>));<span class=\"hljs-comment\">//返回&quot;rc&quot;</span>\n \n<span class=\"hljs-comment\">//从上面两个例子可以看出slice(2,-5)实际上是slice(2,3)，</span>\n负<span class=\"hljs-number\">5</span>加上字符串长度<span class=\"hljs-number\">8</span>转换成正<span class=\"hljs-number\">3</span>(若第一位数字等于或大于第二位数字(<span class=\"hljs-title function_\">slice</span>()注意：这里第二位数字如果是负数是加完字符串长度后的数字，\n而不是显示的数字例：length=<span class=\"hljs-number\">11</span>,(<span class=\"hljs-number\">7</span>,-<span class=\"hljs-number\">6</span>),-<span class=\"hljs-number\">6</span>+<span class=\"hljs-number\">11</span>=<span class=\"hljs-number\">5</span>第二位小于第一位),则返回空字符串);而<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">2</span>,-<span class=\"hljs-number\">5</span>)实际上是<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">2</span>,<span class=\"hljs-number\">0</span>),负数转换为<span class=\"hljs-number\">0</span>,substring总是把较小的数作为起始位置。\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substring</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>))<span class=\"hljs-comment\">//从第2个字符开始，到第5个字符；返回&quot;cinn&quot;</span>\n<span class=\"hljs-title function_\">alert</span>(stmp.<span class=\"hljs-title function_\">substr</span>(<span class=\"hljs-number\">1</span>,<span class=\"hljs-number\">5</span>));<span class=\"hljs-comment\">//从第2个字符开始，截取5个字符；返回&quot;cinn.&quot;</span>\n<span class=\"hljs-keyword\">var</span> phone = <span class=\"hljs-number\">15989012100</span>;\nphone.<span class=\"hljs-title function_\">slice</span>(-<span class=\"hljs-number\">6</span>) 取倒数后<span class=\"hljs-number\">6</span>位(第二个参数不用写<span class=\"hljs-number\">0</span>)，<span class=\"hljs-keyword\">return</span> ‘<span class=\"hljs-number\">012100</span> ’；\nphone.<span class=\"hljs-title function_\">slice</span>(-<span class=\"hljs-number\">6</span>，-<span class=\"hljs-number\">4</span>) 取倒数后<span class=\"hljs-number\">4</span>位到倒数<span class=\"hljs-number\">6</span>位，（-<span class=\"hljs-number\">6</span>+<span class=\"hljs-number\">11</span>，-<span class=\"hljs-number\">4</span>+<span class=\"hljs-number\">11</span>）=（<span class=\"hljs-number\">5</span>,<span class=\"hljs-number\">7</span>）；\n</code></div></pre>\n<pre><code>替换指定字符串后的字母:\n</code></pre>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-keyword\">var</span> abc = <span class=\"hljs-string\">&#x27;adadada=ss&#x27;</span>;\n<span class=\"hljs-keyword\">var</span> j = abc.<span class=\"hljs-title function_\">substring</span>(abc.<span class=\"hljs-title function_\">indexOf</span>(<span class=\"hljs-string\">&#x27;=&#x27;</span>)+<span class=\"hljs-number\">1</span>,abc.<span class=\"hljs-property\">length</span>);\n<span class=\"hljs-keyword\">var</span> dsd =abc.<span class=\"hljs-title function_\">replace</span>(j,<span class=\"hljs-string\">&#x27;haha&#x27;</span>);  --&gt;   dsd = <span class=\"hljs-string\">&#x27;adadada=haha&#x27;</span>\n</code></div></pre>\n', '5', '2', null);
INSERT INTO `articles` VALUES ('8', 'Vue中央事件总线', 'Vue中央事件总线基本用法', 'Vue', '2022-03-08 19:14:45', '<div class=\"hljs-center\">\n<p>什么是Vue中央事件总线？</p>\n</div>\n<p>在Vue中央事件总线之前我们的通信方式一般是父子组件之间的通信props/$emit，但是随着项目的开发，组件的增多，父子组件通信就显得极其沉重，于是这个时候中央事件总线可以更好的帮助我们完成组件之间的通信且更加灵活。</p>\n<p><mark>使用方法：</mark></p>\n<p>第一步：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//在main.js中加上</span>\n<span class=\"hljs-comment\">//事件总线</span>\n<span class=\"hljs-title class_\">Vue</span>.<span class=\"hljs-property\"><span class=\"hljs-keyword\">prototype</span></span>.<span class=\"hljs-property\">$EventBus</span> = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Vue</span>()\n</code></div></pre>\n<p>第二步:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//发送数据</span>\n<span class=\"hljs-comment\">//组件A</span>\n <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$EventBus</span>.$emit(<span class=\"hljs-string\">&#x27;自定义事件&#x27;</span>,数据)\n <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$EventBus</span>.$emit(<span class=\"hljs-string\">&#x27;label&#x27;</span>,label)\n</code></div></pre>\n<p>第三步:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//接收数据</span>\n<span class=\"hljs-comment\">//组件B</span>\n<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$EventBus</span>.$on(<span class=\"hljs-string\">&quot;自定义事件&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">接收的数据</span>) =&gt;</span> {\n      consoe.<span class=\"hljs-title function_\">log</span>(label)\n    });\n<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$EventBus</span>.$on(<span class=\"hljs-string\">&quot;label&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">label</span>) =&gt;</span> {\n      consoe.<span class=\"hljs-title function_\">log</span>(label)\n    });\n</code></div></pre>\n<p>这个时候一个运用中央处理中线的传值就完成了</p>\n<p>–</p>\n<blockquote>\n<p>总结:<br />\n我第一次使用的时候，场景是components里面的某个组件希望和view里面的某个组件进行通信，当时我正纳闷改怎样将两者进行互联，通过套娃？塔桥？等方式，那样我没累死文件我也看晕了，后来接触到了这个才恍然大悟。</p>\n</blockquote>\n', '5', '2', null);
INSERT INTO `articles` VALUES ('9', 'Vue使用过滤器过滤日期格式', '021-01-13T16:00:00.000Z 日期格式转换', 'Vue', '2022-03-08 19:24:26', '<div class=\"hljs-center\">\n<p>Vue使用过滤器过滤日期格式的基本用法</p>\n</div>\n<p>日常开发中，当我们的日期函数出现如下格式时：</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//我们想要实现年月日，时分秒，</span>\n<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">05</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">58</span>\n但是却出现这样的格式\n<span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">03</span>-05<span class=\"hljs-attr\">T11</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">58.</span>000Z\n</code></div></pre>\n<p>这时，我们可以使用vue过滤函数-filters</p>\n<p><mark>代码如下:</mark></p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-attr\">filters</span>:{\n    <span class=\"hljs-title function_\">rTime</span>(<span class=\"hljs-params\">date</span>) {\n    <span class=\"hljs-keyword\">var</span> json_date = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(date).<span class=\"hljs-title function_\">toJSON</span>();\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(<span class=\"hljs-keyword\">new</span> <span class=\"hljs-title class_\">Date</span>(json_date) + <span class=\"hljs-number\">8</span> * <span class=\"hljs-number\">3600</span> * <span class=\"hljs-number\">1000</span>).<span class=\"hljs-title function_\">toISOString</span>().<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/T/g</span>, <span class=\"hljs-string\">&#x27; &#x27;</span>).<span class=\"hljs-title function_\">replace</span>(<span class=\"hljs-regexp\">/\\.[\\d]{3}Z/</span>, <span class=\"hljs-string\">&#x27;&#x27;</span>) \n}\n</code></div></pre>\n<p>这个时候时间格式就正常了~</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-number\">2022</span>-<span class=\"hljs-number\">03</span>-<span class=\"hljs-number\">05</span> <span class=\"hljs-number\">11</span>:<span class=\"hljs-number\">53</span>:<span class=\"hljs-number\">58</span>\n</code></div></pre>\n<p><mark>总结</mark></p>\n<blockquote>\n<p>在这里时候filters是因为前面的日期函数是node处理的，导致前端拿回数据有点小问题，但是我又不想改代码了，于是乎想起filters过滤，filters还是一个很好用的函数往后会经常遇到。</p>\n</blockquote>\n', '7', '6', null);
INSERT INTO `articles` VALUES ('10', 'Vue获取当前登录用户信息', '没有解决，搞了一下午，先记下来以后回顾', 'Vue', '2022-03-12 00:08:36', '<div class=\"hljs-center\">\n<p>想实现一个前端登录成功后获取当前的用户名并渲染到页面上</p>\n</div>\n<p>这里是登录成功后获取到了用户id，并且data中我实验了也是可以渲染的，我用中央处理传值给到后面的首页</p>\n<p>登录代码:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\"><span class=\"hljs-comment\">//登录页面</span>\n  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-comment\">//提交方法</span>\n    <span class=\"hljs-title function_\">submit</span>(<span class=\"hljs-params\"></span>) {\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$refs</span>.<span class=\"hljs-property\">form</span>.<span class=\"hljs-title function_\">validate</span>(<span class=\"hljs-keyword\">async</span> (valid) =&gt; {\n        <span class=\"hljs-keyword\">if</span> (valid) {\n          <span class=\"hljs-comment\">//发送请求</span>\n          <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">login</span>({ ...<span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formData</span> });\n          <span class=\"hljs-comment\">//解构数据</span>\n          <span class=\"hljs-keyword\">let</span> { status, message, token, username, results } = res.<span class=\"hljs-property\">data</span>;\n\n          <span class=\"hljs-comment\">//token鉴权 存入本地</span>\n          <span class=\"hljs-variable language_\">window</span>.<span class=\"hljs-property\">localStorage</span>.<span class=\"hljs-title function_\">setItem</span>(<span class=\"hljs-string\">&quot;t_k&quot;</span>, token);\n\n          <span class=\"hljs-comment\">//如果code值为0 表示成功</span>\n          <span class=\"hljs-keyword\">if</span> (status === <span class=\"hljs-number\">0</span>) {\n            <span class=\"hljs-variable language_\">this</span>.$message({\n              <span class=\"hljs-attr\">message</span>: message,\n              <span class=\"hljs-attr\">type</span>: <span class=\"hljs-string\">&quot;success&quot;</span>,\n            });\n            <span class=\"hljs-keyword\">let</span> id = results[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">id</span>\n            <span class=\"hljs-comment\">// this.id = id</span>\n            <span class=\"hljs-comment\">// console.log(id);</span>\n            <span class=\"hljs-comment\">// console.log(this);</span>\n            bus.$emit(<span class=\"hljs-string\">&#x27;username&#x27;</span>,id)\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$router</span>.<span class=\"hljs-title function_\">push</span>({ <span class=\"hljs-attr\">path</span>: <span class=\"hljs-string\">&quot;/&quot;</span> });\n          } <span class=\"hljs-keyword\">else</span> {\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">$message</span>.<span class=\"hljs-title function_\">error</span>(message);\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formData</span>.<span class=\"hljs-property\">username</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n            <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">formData</span>.<span class=\"hljs-property\">password</span> = <span class=\"hljs-string\">&quot;&quot;</span>;\n          }\n        } <span class=\"hljs-keyword\">else</span> {\n          <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">&quot;验证不通过！&quot;</span>);\n        }\n      });\n    },\n  },\n</code></div></pre>\n<p>首页代码:</p>\n<pre><div class=\"hljs\"><code class=\"lang-js\">  <span class=\"hljs-attr\">methods</span>: {\n    <span class=\"hljs-keyword\">async</span> <span class=\"hljs-title function_\">getData</span>(<span class=\"hljs-params\">val</span>) {\n      <span class=\"hljs-comment\">// console.log(`接收的值`,val);</span>\n      <span class=\"hljs-keyword\">let</span> res = <span class=\"hljs-keyword\">await</span> <span class=\"hljs-title function_\">userInfo</span>({\n        <span class=\"hljs-attr\">id</span>: val,\n      });\n      <span class=\"hljs-keyword\">let</span> _this = <span class=\"hljs-variable language_\">this</span>;\n\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(res.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">results</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">username</span>);\n      _this.<span class=\"hljs-property\">username</span> = res.<span class=\"hljs-property\">data</span>.<span class=\"hljs-property\">results</span>[<span class=\"hljs-number\">0</span>].<span class=\"hljs-property\">username</span>;\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(_this);\n      <span class=\"hljs-variable language_\">console</span>.<span class=\"hljs-title function_\">log</span>(<span class=\"hljs-string\">`this.username`</span>, <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span>);\n    },\n  },\n  <span class=\"hljs-title function_\">created</span>(<span class=\"hljs-params\"></span>) {\n    bus.$on(<span class=\"hljs-string\">&quot;username&quot;</span>, <span class=\"hljs-function\">(<span class=\"hljs-params\">val</span>) =&gt;</span> {\n      <span class=\"hljs-comment\">// console.log(`val`, val);</span>\n      <span class=\"hljs-variable language_\">this</span>.<span class=\"hljs-property\">username</span> = val\n      <span class=\"hljs-comment\">// console.log(this.username);</span>\n      <span class=\"hljs-comment\">// console.log(this);</span>\n      <span class=\"hljs-comment\">// this.getData(val);</span>\n    });\n  },\n\n</code></div></pre>\n<p>到这里拿到了穿过来的id，我尝试赋值到data里并渲染，可惜的是无法渲染，也没有报错，我打印出vue实例查看，显示vue实例确有id，但是vue扩展插件里显示空值，这里我推测值依旧是空的，但是实例上却有值，这让我很费解，先记录下来吧，是否是代码逻辑错误，以我目前的水平实在找不出问题，我监听都监听不到真是nm出鬼了…后面我尝试换一种写法好了…</p>\n', '1', '0', null);




CREATE TABLE `userword` (
  `id` int NOT NULL AUTO_INCREMENT,
  `username` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `password` varchar(255) COLLATE utf8_unicode_ci DEFAULT NULL,
  `word` longtext CHARACTER SET utf8 COLLATE utf8_unicode_ci,
  `ctime` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 COLLATE=utf8_unicode_ci;

-- ----------------------------
-- Records of userword
-- ----------------------------
INSERT INTO `userword` VALUES ('1', 'admin', '$2a$10$SfJKOqD571dYba2jEuRKceGY.Du2X1sAId32Rco.38gr5ejjkfUx.', null, '2022-03-11 15:44:36');
INSERT INTO `userword` VALUES ('2', 'admin1', '$2a$10$GPlpdLMd3pLgKQmrV60ux.UqrZPwaADgtZkYl85Q5aC//gVIvSK4a', null, '2022-03-11 17:27:38');
INSERT INTO `userword` VALUES ('3', 'admin2', '$2a$10$CkcBnjHqohmc2g6raBrCX.Fk8ZwemF3bw1U3c9ew/F.ro3JB.tP.W', null, '2022-03-11 17:28:55');